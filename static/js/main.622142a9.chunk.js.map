{"version":3,"sources":["component/Cats.js","axios.js","data/actions/api.js","container/catSelector.js","data/actions/state.js","component/CatDetail.js","container/catDetail.js","App.js","serviceWorker.js","data/reducer.js","index.js","data/initial.js"],"names":["Cats","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onLoad","event","chosenCat","value","cats","react_default","a","createElement","Fragment","className","react_select_esm","onChange","bind","options","map","item","label","name","Component","axios","create","baseURL","headers","Accept","x-api-key","connect","_ref","cat","dispatch","get","then","data","type","setCats","setSelectedCat","CatDetail","DisplayCat","origin","description","temperament","affection_level","child_friendly","energy_level","intelligence","life_span","social_needs","App","catSelector","catDetail","Boolean","window","location","hostname","match","state","objectSpread","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.622142a9.chunk.js","sourcesContent":["// importing the needed packages\r\nimport React , { Component } from 'react';\r\nimport Select from 'react-select';\r\n\r\nimport '../index.css';\r\n\r\nclass Cats extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        \r\n    }\r\n    // function that runs the function to load the cats from the API\r\n    componentDidMount(){\r\n        this.props.onLoad();\r\n    }\r\n    // when the selector changes that must means a new breed has been selected\r\n    onChange(event) {\r\n        this.props.chosenCat(event.value);\r\n\r\n    }\r\n   \r\n    render(){\r\n        // setting the cats props to be called cats\r\n        const { cats } = this.props;\r\n       \r\n        return(\r\n            <>\r\n                {/* cat header */}\r\n                <div>\r\n                    <h2 className=\"cats-header\">Cat Breed Selector</h2>\r\n                </div>\r\n                {/* selector for all the cat breeds */}\r\n                <div className=\"cat-selector-field\">\r\n                    <Select\r\n                    className=\"cat-selector\"\r\n                    onChange={this.onChange.bind(this)}\r\n                    // mapping over the cats array and pulling out all of its objects\r\n                     options = {cats.map((item) => (\r\n                        {\r\n                            // setting the value of the breed to be equal to the whole item its in\r\n                            value: item,\r\n                            // setting the label to be the name given in the item\r\n                            label: item.name\r\n                        }\r\n\r\n                    ))}/>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cats;","// importing the axios files to access apis\r\nimport axios from 'axios';\r\n\r\n// setting up the base URL to use for the api calls\r\nexport default axios.create({\r\n    baseURL: 'https://api.thecatapi.com/v1',\r\n    headers: {\r\n        Accept: 'application/json',\r\n       'x-api-key': 'cf5d749e-e5e1-4e6f-a707-9dcd59f18a78'\r\n    },\r\n});","// importing the axios base URL\r\nimport axios from '../../axios';\r\n\r\n// importing the api function\r\nimport { setCats } from './state';\r\n\r\n// connecting to the api and setting the data recieved \r\nexport const getCats = () => dispatch => {\r\n    axios.get('/breeds').then(({ data })=> {\r\n        const cats = data;\r\n        dispatch(setCats(cats));\r\n    })\r\n}\r\n\r\n","// importing connect to connect to the redux store\r\nimport { connect } from 'react-redux';\r\n\r\n// importing the needed components\r\nimport Cats from '../component/Cats.js';\r\n\r\n// importing the needed actions that get fired on the functions that was triggered as a prop\r\nimport { getCats } from '../data/actions/api';\r\nimport { setSelectedCat } from '../data/actions/state';\r\n\r\n// setting the props needed for the imported component\r\nconst mapStateToProps = ({ cats, cat }) => ({ cats, cat });\r\n\r\n// dispatching the functions that changes the store\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onLoad: () => dispatch(getCats()),\r\n        chosenCat: value => dispatch(setSelectedCat(value)),\r\n    };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cats);","export const setCats = cats => {\r\n    return{ \r\n        type: 'setCats',\r\n        cats: cats,\r\n    };\r\n}\r\n\r\nexport function setSelectedCat(value) {\r\n    return {\r\n        type: 'setSelectedCat',\r\n        cat: value\r\n    };\r\n}","// importing the needed files\r\nimport React , { Component } from 'react';\r\n\r\n\r\n// creating the component \r\nclass CatDetail extends Component {\r\n    render(){\r\n        // setting the prop passed in as DisplayCat\r\n        const { DisplayCat } = this.props;\r\n       \r\n        return(\r\n            <>  \r\n                {/* Checking to see if there is a data field called origin inside the DisplayCat state,\r\n                if there is that means a breed of cat has been selected.\r\n                if not that means no breed has been selected   */}\r\n                {DisplayCat.origin?\r\n                    // div that holds all of the data\r\n                    <div className=\"display-cat-container\">\r\n                        \r\n                        <div className=\"display-cat-top-info\">\r\n                            <h1 className=\"display-cat-name\">\r\n                            {DisplayCat.name}\r\n                            </h1>\r\n\r\n                            <p className=\"display-cat-desciption\">\r\n                            {DisplayCat.description}\r\n                            </p>\r\n\r\n                            <h2 className=\"display-cat-origin\">\r\n                            <span className=\"text-label\">Origin: </span><br></br>\r\n                            {DisplayCat.origin}\r\n                            </h2>\r\n\r\n                            <h2 className=\"display-cat-temper\">\r\n                            <span className=\"text-label\">Temperament: </span><br></br>\r\n                            {DisplayCat.temperament}\r\n                            </h2>\r\n\r\n                        </div>\r\n                        {/* div that holds the cubes of data */}\r\n                        <div className=\"display-cat-cubes\">\r\n\r\n                            <h2 className=\"display-cat-cube\">\r\n                            <span className=\"text-label\">Affection Level:</span><br></br>\r\n                            {DisplayCat.affection_level}\r\n                            </h2>\r\n\r\n                            <h2 className=\"display-cat-cube\">\r\n                            <span className=\"text-label\">Child Friendliness: </span><br></br>\r\n                            {DisplayCat.child_friendly}\r\n                            </h2>\r\n                            \r\n                            <h2 className=\"display-cat-cube\">  \r\n                            <span className=\"text-label\">Energy Level: </span> <br></br>\r\n                            {DisplayCat.energy_level}\r\n                            </h2>\r\n\r\n                            <h2 className=\"display-cat-cube\">  \r\n                            <span className=\"text-label\">Intelligence: </span><br></br> \r\n                            {DisplayCat.intelligence}\r\n                            </h2>\r\n\r\n                            <h2 className=\"display-cat-cube\">  \r\n                            <span className=\"text-label\">Life-Span: </span><br></br>\r\n                            {DisplayCat.life_span}\r\n                            <span className=\"text-label\"> Years</span> \r\n                            </h2>\r\n\r\n                            <h2 className=\"display-cat-cube\">  \r\n                            <span className=\"text-label\">Social Needs: </span><br></br>\r\n                            {DisplayCat.social_needs}\r\n                            </h2>\r\n\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    // div that holds the styling when a breed hasnt been selected\r\n                    <div className=\"no-cat-selected\">\r\n                        <h1 className=\"no-cat-header\">Please choose a breed above</h1>\r\n                    </div>\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CatDetail;","// importing connect to connect to the redux store\r\nimport { connect } from 'react-redux';\r\n\r\n// importing the needed components\r\nimport CatDetail from '../component/CatDetail';\r\n\r\n// setting the props to use in the component from the redux store\r\nconst mapStateToProps = ({ DisplayCat }) => ({ DisplayCat });\r\n\r\n\r\nexport default connect(mapStateToProps)(CatDetail);","// importing thr needed files\nimport React, { Component } from 'react';\n\n// importing the containers needed for the page\nimport Cats from './container/catSelector';\nimport CatDetail from './container/catDetail';\n\nclass App extends Component {\n  render() {\n    return (\n        <>\n          <div className=\"app-components\">\n            <Cats className=\"CatSelectorContainer\"/>\n            <CatDetail className=\"CatDetailContainer\"/>\n          </div>\n        </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\n// creating the reducer that changes the state\r\nexport default  (state, action) => {\r\n    switch(action.type) {\r\n        case 'setCats' : return setCats(state,action);\r\n        case 'setSelectedCat': return{...state, DisplayCat: action.cat};\r\n        default: return state;\r\n    }\r\n}\r\n\r\n// function that changes the state and ands the data from the api \r\nconst setCats = (state, { cats }) => {\r\n    return {\r\n        ...state,\r\n        cats: cats,\r\n    }\r\n}\r\n\r\n","// importing react components \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// importing the right componets to set up redux store\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\n// importing the files to create the redux store\nimport initial from './data/initial';\nimport reducer from './data/reducer';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, initial, composeEnhancers(applyMiddleware(thunk)));\n\n// setting up the provider for the store\nReactDOM.render(\n\t<Provider store={ store }>\n\t\t<div className=\"app-container\">\n\t\t\t<App/>\n\t\t</div>\n\t</Provider>, \n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// setting up the initail state \r\nexport default {\r\n    cats:[],\r\n    DisplayCat:{},\r\n}\r\n"],"sourceRoot":""}